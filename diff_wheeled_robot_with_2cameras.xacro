<?xml version="1.0"?>
<robot name="differential_wheeled_robot" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:include filename="$(find mastering_ros_robot_description_pkg)/urdf/wheel.urdf.xacro" />


<!-- Defining the colors used in this robot -->
  <material name="Black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>

  <material name="Red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>

  <material name="White">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>


  <material name="Blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>

  <material name="Green">
    <color rgba="0.0 1.0 0.0 1.0"/>
  </material>



  <!-- PROPERTY LIST -->
  <!--All units in m-kg-s-radians unit system -->
  <xacro:property name="M_PI" value="3.1415926535897931" />
  <xacro:property name="M_PI_2" value="1.570796327" />
  <xacro:property name="DEG_TO_RAD" value="0.017453293" />

  <!-- Main body radius and height -->
  <!-- Main Body Cylinder base   -->
  <xacro:property name="base_height" value="0.02" />
  <xacro:property name="base_radius" value="0.15" />
  <xacro:property name="base_mass" value="5" /> <!-- in kg-->



  <!-- caster wheel radius and height -->
  <!-- caster wheel mass -->
  <xacro:property name="caster_f_height" value="0.04" />
  <xacro:property name="caster_f_radius" value="0.025" />
  <xacro:property name="caster_f_mass" value="0.5" /> <!-- in kg-->



  <!-- caster wheel radius and height -->
  <!-- caster wheel mass -->
  <xacro:property name="caster_b_height" value="0.04" />
  <xacro:property name="caster_b_radius" value="0.025" />
  <xacro:property name="caster_b_mass" value="0.5" /> <!-- in kg-->




  <!-- Wheels -->

  <xacro:property name="wheel_mass" value="2.5" /> --> <!-- in kg-->

  <xacro:property name="base_x_origin_to_wheel_origin" value="0.25" />
  <xacro:property name="base_y_origin_to_wheel_origin" value="0.3" />
  <xacro:property name="base_z_origin_to_wheel_origin" value="0.0" />


  <!-- Hokuyo Laser scanner -->
  <xacro:property name="hokuyo_size" value="0.05" />
  <xacro:property name="camera_size" value="0.05" />



  <!-- Macro for calculating inertia of cylinder -->
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertia  ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0"
              iyy="${m*(3*r*r+h*h)/12}" iyz = "0"
              izz="${m*r*r/2}" />
  </xacro:macro>


  <!-- BASE-FOOTPRINT -->
  <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin -->
  <link name="base_footprint">
    <inertial>
      <mass value="0.0001" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
          iyy="0.0001" iyz="0.0"
          izz="0.0001" />
    </inertial>
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
            <box size="0.001 0.001 0.001" />
        </geometry>
    </visual>
  </link>

  <gazebo reference="base_footprint">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <joint name="base_footprint_joint" type="fixed">
    <origin xyz="0 0 ${wheel_radius - base_z_origin_to_wheel_origin}" rpy="0 0 0" />
    <parent link="base_footprint"/>
    <child link="base_link" />
  </joint>

  <!-- BASE-LINK -->
  <!--Actual body/chassis of the robot-->
  <link name="base_link">
    <inertial>
      <mass value="${base_mass}" />
      <origin xyz="0 0 0" />
      <!--The 3x3 rotational inertia matrix. -->
        <cylinder_inertia  m="${base_mass}" r="${base_radius}" h="${base_height}" />

    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>


          <cylinder length="${base_height}" radius="${base_radius}" />


      </geometry>
      <material name="White" />
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0 " />
      <geometry>

          <cylinder length="${base_height}" radius="${base_radius}" />

      </geometry>
    </collision>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/White</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>





<!--Caster front  -->

    <link name="caster_front_link">

    <visual>
      <origin xyz="0 0.02 0" rpy="${M_PI/2} 0 0" />
      <geometry>
	<sphere radius="${caster_f_radius}" />
      </geometry>
      <material name="Black" />
    </visual>



      <collision>
        <geometry>

	<sphere radius="${caster_f_radius}" />

        </geometry>
      <origin xyz="0 0.02 0" rpy="${M_PI/2} 0 0" />
      </collision>
      <inertial>
        <mass value="${caster_f_mass}" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                 iyy="0.001" iyz="0.0"
                 izz="0.001" />
      </inertial>
    </link>



 <joint name="caster_front_joint" type="fixed">
      <parent link="base_link"/>
      <child link="caster_front_link"/>
      <origin xyz="0.115 0.0 0.007" rpy="${-M_PI/2} 0 0"/>
    </joint>


  <gazebo reference="caster_front_link">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>



<!--Caster back  -->

    <link name="caster_back_link">

    <visual>
      <origin xyz="0.02 0.02 0 " rpy="${M_PI/2} 0 0" />

      <geometry>


	<sphere radius="${caster_b_radius}" />


      </geometry>
      <material name="Black" />
    </visual>



      <collision>
        <geometry>
		<sphere radius="${caster_b_radius}" />
        </geometry>
      <origin xyz="0 0.02 0 " rpy="${M_PI/2} 0 0" />
      </collision>
      <inertial>
        <mass value="${caster_b_mass}" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                 iyy="0.001" iyz="0.0"
                 izz="0.001" />
      </inertial>
    </link>

    <joint name="caster_back_joint" type="fixed">
      <parent link="base_link"/>
      <child link="caster_back_link"/>
      <origin xyz="-0.135 0.0 0.009" rpy="${-M_PI/2} 0 0"/>
    </joint>


  <gazebo reference="caster_back_link">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>


<!-- Wheel Definitions -->

  <wheel fb="front" lr="right" parent="base_link" translateX="0" translateY="0.5" flipY="1"/>
  <wheel fb="front" lr="left" parent="base_link" translateX="0" translateY="-0.5" flipY="1"/>

  <!-- SENSORS -->

  <!-- camera_left -->
   <link name="camera_left">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="${camera_size} ${camera_size} ${camera_size}"/>
      </geometry>
      <material name="Green" />
    </visual>
  </link>
  <joint name="camera_joint1" type="fixed">
    <origin xyz="${base_radius - camera_size/2} ${camera_size*1.5} ${base_height+camera_size/4}" rpy="0 0 0" />
    <parent link="base_link"/>
    <child link="camera_left" />
  </joint>
  <gazebo reference="camera_left">
    <material>Gazebo/Green</material>
    <turnGravityOff>false</turnGravityOff>
    <sensor name="camera_left" type="camera">
        <update_rate>30.0</update_rate>
        <camera>
          <horizontal_fov>1.3962634</horizontal_fov>
          <image>
            <width>800</width>
            <height>800</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.2</near>
            <far>300</far>
          </clip>
          <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera/left</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_left</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

 <!-- camera_right -->
  <link name="camera_right">
   <visual>
     <origin xyz="0 0 0" rpy="0 0 0" />
     <geometry>
       <box size="${camera_size} ${camera_size} ${camera_size}"/>
     </geometry>
     <material name="Green" />
   </visual>
  </link>
  <joint name="camera_joint2" type="fixed">
   <origin xyz="${base_radius - camera_size/2} ${-camera_size*1.5} ${base_height+camera_size/4}" rpy="0 0 0" />
   <parent link="base_link"/>
   <child link="camera_right" />
  </joint>
  <gazebo reference="camera_right">
   <material>Gazebo/Green</material>
   <turnGravityOff>false</turnGravityOff>
   <sensor name="camera_right" type="camera">
       <update_rate>30.0</update_rate>
       <camera>
         <horizontal_fov>1.3962634</horizontal_fov>
         <image>
           <width>800</width>
           <height>800</height>
           <format>R8G8B8</format>
         </image>
         <clip>
           <near>0.2</near>
           <far>300</far>
         </clip>
         <noise>
         <type>gaussian</type>
         <!-- Noise is sampled independently per pixel on each frame.
              That pixel's noise value is added to each of its color
              channels, which at that point lie in the range [0,1]. -->
         <mean>0.0</mean>
         <stddev>0.007</stddev>
       </noise>
       </camera>
       <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
       <alwaysOn>true</alwaysOn>
       <updateRate>0.0</updateRate>
       <cameraName>camera/right</cameraName>
       <imageTopicName>image_raw</imageTopicName>
       <cameraInfoTopicName>camera_info</cameraInfoTopicName>
       <frameName>camera_right</frameName>
       <hackBaseline>0.07</hackBaseline>
       <distortionK1>0.0</distortionK1>
       <distortionK2>0.0</distortionK2>
       <distortionK3>0.0</distortionK3>
       <distortionT1>0.0</distortionT1>
       <distortionT2>0.0</distortionT2>
     </plugin>
   </sensor>
  </gazebo>


  <!-- Differential drive controller  -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <legacyMode>true</legacyMode>
      <rosDebugLevel>Debug</rosDebugLevel>
      <publishWheelTF>false</publishWheelTF>
      <robotNamespace>/</robotNamespace>
      <publishTf>1</publishTf>
      <publishWheelJointState>false</publishWheelJointState>
      <alwaysOn>true</alwaysOn>
      <updateRate>100.0</updateRate>
      <leftJoint>front_left_wheel_joint</leftJoint>
      <rightJoint>front_right_wheel_joint</rightJoint>
      <wheelSeparation>${2*base_radius}</wheelSeparation>
      <wheelDiameter>${2*wheel_radius}</wheelDiameter>
      <broadcastTF>1</broadcastTF>
      <wheelTorque>30</wheelTorque>
      <wheelAcceleration>1.8</wheelAcceleration>
      <commandTopic>cmd_vel</commandTopic>
      <odometryFrame>odom</odometryFrame>
      <odometryTopic>odom</odometryTopic>
      <robotBaseFrame>base_footprint</robotBaseFrame>


    </plugin>
  </gazebo>




</robot>
